{"version":3,"file":"reshader.umd.js","sources":["../src/features/createShades/index.ts","../src/utils/isValidHexColor/index.ts"],"sourcesContent":["import Color from \"color\"\n\nimport { isValidHexColor } from \"src/utils\"\nimport { INVALID_COLOR_STRING } from \"src/exceptionMessages\"\n\nconst DEFAULT_CONTRAST_RATIO = 0.3\n\n/**\n * `createShades` returns the shades from `color`\n *\n * @param color the color the shades will be created from\n * @param options.contrastRatio (default: 0.3) from 0.1 to 1, how strong the contrast between shades will look like (0.1 is the slightest, 1 is the strongest)\n */\nexport function createShades(\n  color: string,\n  options: ICreateShadesOptions = {\n    contrastRatio: DEFAULT_CONTRAST_RATIO,\n  },\n): IShades {\n  if (!isValidHexColor(color)) {\n    throw new Error(INVALID_COLOR_STRING)\n  }\n\n  const dark = getDarkerShadeFromColor(color, options.contrastRatio)\n  const darker = getDarkerShadeFromColor(dark, options.contrastRatio)\n  const darkest = getDarkerShadeFromColor(darker, options.contrastRatio)\n\n  const light = getLighterShadeFromColor(color, options.contrastRatio)\n  const lighter = getLighterShadeFromColor(light, options.contrastRatio)\n  const lightest = getLighterShadeFromColor(lighter, options.contrastRatio)\n\n  return {\n    darkest,\n    darker,\n    dark,\n\n    lightest,\n    lighter,\n    light,\n\n    neutral: color,\n  }\n}\n\nfunction getLighterShadeFromColor(\n  color: string,\n  contrastRatio: number = DEFAULT_CONTRAST_RATIO,\n): string {\n  return Color(color)\n    .lighten(contrastRatio)\n    .hex()\n}\n\nfunction getDarkerShadeFromColor(\n  color: string,\n  contrastRatio: number = DEFAULT_CONTRAST_RATIO,\n): string {\n  return Color(color)\n    .darken(contrastRatio)\n    .hex()\n}\n\ninterface ICreateShadesOptions {\n  contrastRatio: number\n}\n\nexport interface IShades {\n  darkest: string\n  darker: string\n  dark: string\n  lightest: string\n  lighter: string\n  light: string\n  neutral: string\n}\n","/**\n * isValidHexColor checks whether a given color string matches\n * a hexadecimal string.\n *\n * @param maybeHexColor the string to check\n */\nexport function isValidHexColor(maybeHexColor: string): boolean {\n  return /^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(maybeHexColor)\n}\n"],"names":["DEFAULT_CONTRAST_RATIO","getLighterShadeFromColor","color","contrastRatio","Color","lighten","hex","getDarkerShadeFromColor","darken","options","test","Error","dark","darker","darkest","light","lighter","neutral"],"mappings":"gQAKMA,EAAyB,GAuC/B,SAASC,EACPC,EACAC,yBAAwBH,GAEjBI,EAAMF,GACVG,QAAQF,GACRG,MAGL,SAASC,EACPL,EACAC,yBAAwBH,GAEjBI,EAAMF,GACVM,OAAOL,GACPG,8BA7CHJ,EACAO,qBAAgC,CAC9BN,cAAeH,KCTV,gCAAgCU,KDYlBR,SACb,IAAIS,+LAGNC,EAAOL,EAAwBL,EAAOO,EAAQN,eAC9CU,EAASN,EAAwBK,EAAMH,EAAQN,eAC/CW,EAAUP,EAAwBM,EAAQJ,EAAQN,eAElDY,EAAQd,EAAyBC,EAAOO,EAAQN,eAChDa,EAAUf,EAAyBc,EAAON,EAAQN,qBAGjD,SACLW,SACAD,OACAD,WALeX,EAAyBe,EAASP,EAAQN,uBAQzDa,QACAD,EAEAE,QAASf"}