{"version":3,"file":"reshader.umd.js","sources":["../src/utils/format/index.ts","../src/features/createSwatch/index.ts","../src/utils/isValidHexColor/index.ts","../src/features/createShades/index.ts","../src/features/createSwatch/hydrateSwatchName/index.ts","../src/features/createPalette/index.ts","../src/parsers/parsePaletteToJSON/index.ts","../src/parsers/parsePaletteToJS/index.ts","../src/parsers/parsePaletteToCSS/index.ts","../src/parsers/parsePaletteToSCSS/index.ts"],"sourcesContent":["export function format(content: string, tokenValue: string): string {\n  return content.replace(/%s/, tokenValue)\n}\n","import ntc from \"ntcjs\"\n\nimport { IShades } from \"../createShades\"\nimport { hydrateSwatchName } from \"./hydrateSwatchName\"\nimport { format } from \"src/utils/format\"\n\nexport function createSwatch({\n  formalName,\n  shades,\n  contrastRatio,\n}: TCreateSwatch): ISwatch {\n  if (!shades) {\n    throw new Error(EXCEPTION__UNDEFINED_SHADES)\n  }\n\n  if (!shades.neutral) {\n    throw new Error(\n      format(EXCEPTION__NO_NEUTRAL, JSON.stringify(shades, null, 2)),\n    )\n  }\n\n  const actualFormalName = formalName || ntc.name(shades.neutral)[1]\n  const hydratedName = hydrateSwatchName(actualFormalName)\n\n  return {\n    formalName: actualFormalName,\n    hydratedName,\n    contrastRatio: contrastRatio || 0.2,\n    shades,\n  }\n}\n\nexport interface ISwatch {\n  formalName: string\n  hydratedName: string\n  shades: IShades\n  contrastRatio: number\n}\n\ntype TCreateSwatch = Pick<ISwatch, \"shades\"> & {\n  formalName?: string\n  contrastRatio?: number\n}\n\nexport const EXCEPTION__UNDEFINED_SHADES = `\"createSwatch\" requires at least the argument \"shades\"`\nexport const EXCEPTION__NO_NEUTRAL = `You are trying to run \"createSwatch\" without passing the \"neutral\" shade\nthrough the \"shades\" property. What we actually got is this: (\"%s\").\nPlease, make sure the shade \"neutral\" is present and is a valid hex code.`\n","/**\n * isValidHexColor checks whether a given color string matches\n * a hexadecimal string.\n *\n * @param maybeHexColor the string to check\n */\nexport function isValidHexColor(maybeHexColor: string): boolean {\n  return /^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(maybeHexColor)\n}\n","import Color from \"color\"\n\nimport { isValidHexColor, format } from \"src/utils\"\n\nconst DEFAULT_CONTRAST_RATIO = 0.2\n\n/**\n * `createShades` returns the shades from `color`\n *\n * @param color the color the shades will be created from\n * @param options.contrastRatio (default: 0.1) from 0.1 to 1, how strong the contrast between shades will look like (0.1 is the slightest, 1 is the strongest)\n */\nexport function createShades(\n  color: string,\n  options: ICreateShadesOptions = defaultCreateShadesOptions,\n): IShades {\n  if (!isValidHexColor(color)) {\n    throw new Error(\n      format(EXCEPTION__INVALID_COLOR_STRING, `\"${color.toString()}\"`),\n    )\n  }\n\n  const invalidOptionNames = getInvalidOptionsNames(options)\n  if (invalidOptionNames.length > 0) {\n    throw new Error(\n      format(\n        EXCEPTION__INVALID_CREATE_SHADES_OPTIONS,\n        `\"${invalidOptionNames.join(\", \")}\"`,\n      ),\n    )\n  }\n\n  const dark = getDarkerShadeFromColor(color, options.contrastRatio)\n  const darker = getDarkerShadeFromColor(dark, options.contrastRatio)\n  const darkest = getDarkerShadeFromColor(darker, options.contrastRatio)\n\n  const light = getLighterShadeFromColor(color, options.contrastRatio)\n  const lighter = getLighterShadeFromColor(light, options.contrastRatio)\n  const lightest = getLighterShadeFromColor(lighter, options.contrastRatio)\n\n  return {\n    darkest,\n    darker,\n    dark,\n\n    neutral: color.toUpperCase(),\n\n    light,\n    lighter,\n    lightest,\n  }\n}\n\nconst defaultCreateShadesOptions: ICreateShadesOptions = {\n  contrastRatio: DEFAULT_CONTRAST_RATIO,\n}\n\nfunction getLighterShadeFromColor(\n  color: string,\n  contrastRatio: number = DEFAULT_CONTRAST_RATIO,\n): string {\n  return Color(color)\n    .lighten(contrastRatio)\n    .hex()\n}\n\nfunction getDarkerShadeFromColor(\n  color: string,\n  contrastRatio: number = DEFAULT_CONTRAST_RATIO,\n): string {\n  return Color(color)\n    .darken(contrastRatio)\n    .hex()\n}\n\nfunction getInvalidOptionsNames(\n  createShadesOptions: ICreateShadesOptions,\n): string[] {\n  const dirtyOptionsNames = Object.keys(createShadesOptions)\n  const validOptionsNames = Object.keys(defaultCreateShadesOptions)\n\n  if (dirtyOptionsNames.length === 0) {\n    return []\n  }\n\n  const invalidOptionsNames: string[] = dirtyOptionsNames.filter(\n    dirtyOptionName => {\n      if (!validOptionsNames.includes(dirtyOptionName)) {\n        return true\n      }\n\n      return false\n    },\n  )\n\n  return invalidOptionsNames\n}\n\nexport const EXCEPTION__INVALID_COLOR_STRING = `You are passing an invalid or malformed color string (%s).\nTo learn more about our algorithm for hexadecimal color strings,\nplease refer to https://stackoverflow.com/a/9682781.\n`\n\nexport const EXCEPTION__INVALID_CREATE_SHADES_OPTIONS = `You passed some invalid options when generating shades (%s).\nPlease refer to https://github.com/chiefGui/reshader to know more\nabout the available, valid options.\n`\n\nexport interface ICreateShadesOptions {\n  /**\n   * `contrastRatio`\n   * (default: 0.3) from 0.1 to 1, how strong the contrast between shades will look like (0.1 is the slightest, 1 is the strongest)\n   */\n  contrastRatio?: number\n}\n\nexport interface IShades {\n  darkest: string\n  darker: string\n  dark: string\n  neutral: string\n  light: string\n  lighter: string\n  lightest: string\n}\n","export function hydrateSwatchName(dirtySwatchName: string): string {\n  const trimmed = dirtySwatchName.trim()\n  const camelized = camelize(trimmed)\n  const validCharactersOnly = removeWeirdCharacters(camelized)\n\n  return validCharactersOnly\n}\n\nfunction camelize(str: string): string {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(word, index) {\n      return index == 0 ? word.toLowerCase() : word.toUpperCase()\n    })\n    .replace(/\\s+/g, \"\")\n}\n\nfunction removeWeirdCharacters(str: string): string {\n  return str.replace(/[^a-zA-Z0-9]/g, \"\").replace(/['\"]+/g, \"\")\n}\n","import { createShades, IShades, ICreateShadesOptions } from \"../createShades\"\n\n/**\n * `createPalette` returns shades for every color present on its first argument.\n *\n * @param {string | TColorsShape} colors - The colors you want to generate shades from.\n */\nexport function createPalette<TColors extends TColorsShape>(\n  colors: TColors,\n): TPalette<TColors> {\n  const colorNames = Object.keys(colors) as (keyof TColors)[]\n\n  return colorNames.reduce(\n    (previousColor, currentColor) => {\n      /**\n       * Let's normalize the color input\n       */\n      const colorShape = getColorShape(colors[currentColor])\n\n      previousColor[currentColor] = createShades(\n        colorShape.hex,\n        colorShape.options,\n      )\n\n      return previousColor\n    },\n    {} as TPalette<TColors>,\n  )\n}\n\nfunction getColorShape(color: string | IColorShape): IColorShape {\n  if (typeof color === \"string\") {\n    return {\n      hex: color,\n      options: {},\n    }\n  }\n\n  return color\n}\n\ntype TColorsShape = { [colorName: string]: string | IColorShape }\n\ninterface IColorShape {\n  /**\n   * A valid hexadecimal string that represents a given color.\n   * Passing an invalid value here will throw an exception.\n   */\n  hex: string\n\n  /**\n   * The options used to generate the shades for this given color.\n   * Same as the options of `createShades`, as seen in `ICreateShadesOptions`.\n   */\n  options?: ICreateShadesOptions\n}\n\nexport type TPalette<TColors extends TColorsShape> = {\n  [colorName in keyof TColors]: IShades\n}\n","import { ISwatch } from \"src/features/createSwatch\"\n\nexport function parsePaletteToJSON(palette: ISwatch[]): string {\n  return `{\n${palette\n  .map(\n    (swatch, index) => `  \"${swatch.hydratedName}\": {\n    \"darkest\": \"${swatch.shades.darkest}\",\n    \"darker\": \"${swatch.shades.darker}\",\n    \"dark\": \"${swatch.shades.dark}\",\n    \"neutral\": \"${swatch.shades.neutral}\",\n    \"light\": \"${swatch.shades.light}\",\n    \"lighter\": \"${swatch.shades.lighter}\",\n    \"lightest\": \"${swatch.shades.lightest}\"\n  }${index !== palette.length - 1 ? \",\" : \"\"}`,\n  )\n  .join(\"\\n\\n\")}\n}`\n}\n","import { ISwatch } from \"src/features/createSwatch\"\n\nexport function parsePaletteToJS(palette: ISwatch[]): string {\n  return `{\n${palette\n  .map(\n    swatch => `  ${swatch.hydratedName}: {\n    darkest: \"${swatch.shades.darkest}\",\n    darker: \"${swatch.shades.darker}\",\n    dark: \"${swatch.shades.dark}\",\n    neutral: \"${swatch.shades.neutral}\",\n    light: \"${swatch.shades.light}\",\n    lighter: \"${swatch.shades.lighter}\",\n    lightest: \"${swatch.shades.lightest}\",\n  },`,\n  )\n  .join(\"\\n\\n\")}\n}`\n}\n","import { ISwatch } from \"src/features/createSwatch\"\n\nexport function parsePaletteToCSS(palette: ISwatch[]): string {\n  return `:root {\n${palette\n  .map(\n    swatch => `  --palette-${swatch.hydratedName}--darkest: ${swatch.shades.darkest};\n  --palette-${swatch.hydratedName}--darker: ${swatch.shades.darker};\n  --palette-${swatch.hydratedName}--dark: ${swatch.shades.dark};\n  --palette-${swatch.hydratedName}--neutral: ${swatch.shades.neutral};\n  --palette-${swatch.hydratedName}--light: ${swatch.shades.light};\n  --palette-${swatch.hydratedName}--lighter: ${swatch.shades.lighter};\n  --palette-${swatch.hydratedName}--lightest: ${swatch.shades.lightest};`,\n  )\n  .join(\"\\n\\n\")}\n}`\n}\n","import { ISwatch } from \"src/features/createSwatch\"\n\nexport function parsePaletteToSCSS(palette: ISwatch[]): string {\n  return `${palette\n    .map(\n      swatch => `$palette-${swatch.hydratedName}--darkest: ${swatch.shades.darkest};\n$palette-${swatch.hydratedName}--darker: ${swatch.shades.darker};\n$palette-${swatch.hydratedName}--dark: ${swatch.shades.dark};\n$palette-${swatch.hydratedName}--neutral: ${swatch.shades.neutral};\n$palette-${swatch.hydratedName}--light: ${swatch.shades.light};\n$palette-${swatch.hydratedName}--lighter: ${swatch.shades.lighter};\n$palette-${swatch.hydratedName}--lightest: ${swatch.shades.lightest};`,\n    )\n    .join(\"\\n\\n\")}`\n}\n"],"names":["format","content","tokenValue","replace","EXCEPTION__NO_NEUTRAL","isValidHexColor","maybeHexColor","test","const","DEFAULT_CONTRAST_RATIO","createShades","color","options","defaultCreateShadesOptions","Error","EXCEPTION__INVALID_COLOR_STRING","toString","dirtyOptionsNames","validOptionsNames","invalidOptionNames","Object","keys","length","filter","dirtyOptionName","includes","EXCEPTION__INVALID_CREATE_SHADES_OPTIONS","join","dark","getDarkerShadeFromColor","contrastRatio","darker","darkest","light","getLighterShadeFromColor","lighter","lightest","neutral","toUpperCase","Color","lighten","hex","darken","ref","shades","JSON","stringify","actualFormalName","formalName","ntc","name","trim","word","index","toLowerCase","colors","reduce","previousColor","currentColor","colorShape","palette","map","swatch"],"mappings":"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"}