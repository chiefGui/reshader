{"version":3,"file":"reshader.mjs","sources":["../src/utils/format/index.ts","../src/features/createShades/index.ts","../src/utils/isValidHexColor/index.ts","../src/features/createPalette/index.ts","../src/parsers/parseSchemaToJSON/index.ts"],"sourcesContent":["export function format(content: string, tokenValue: string): string {\n  return content.replace(/%s/, tokenValue)\n}\n","import Color from \"color\"\n\nimport { isValidHexColor, format } from \"src/utils\"\n\nconst DEFAULT_CONTRAST_RATIO = 0.3\n\n/**\n * `createShades` returns the shades from `color`\n *\n * @param color the color the shades will be created from\n * @param options.contrastRatio (default: 0.3) from 0.1 to 1, how strong the contrast between shades will look like (0.1 is the slightest, 1 is the strongest)\n */\nexport function createShades(\n  color: string,\n  options: ICreateShadesOptions = defaultCreateShadesOptions,\n): IShades {\n  if (!isValidHexColor(color)) {\n    throw new Error(\n      format(EXCEPTION__INVALID_COLOR_STRING, `\"${color.toString()}\"`),\n    )\n  }\n\n  const invalidOptionNames = getInvalidOptionsNames(options)\n  if (invalidOptionNames.length > 0) {\n    throw new Error(\n      format(\n        EXCEPTION__INVALID_CREATE_SHADES_OPTIONS,\n        `\"${invalidOptionNames.join(\", \")}\"`,\n      ),\n    )\n  }\n\n  const dark = getDarkerShadeFromColor(color, options.contrastRatio)\n  const darker = getDarkerShadeFromColor(dark, options.contrastRatio)\n  const darkest = getDarkerShadeFromColor(darker, options.contrastRatio)\n\n  const light = getLighterShadeFromColor(color, options.contrastRatio)\n  const lighter = getLighterShadeFromColor(light, options.contrastRatio)\n  const lightest = getLighterShadeFromColor(lighter, options.contrastRatio)\n\n  return {\n    darkest,\n    darker,\n    dark,\n\n    neutral: color,\n\n    light,\n    lighter,\n    lightest,\n  }\n}\n\nconst defaultCreateShadesOptions: ICreateShadesOptions = {\n  contrastRatio: DEFAULT_CONTRAST_RATIO,\n}\n\nfunction getLighterShadeFromColor(\n  color: string,\n  contrastRatio: number = DEFAULT_CONTRAST_RATIO,\n): string {\n  return Color(color)\n    .lighten(contrastRatio)\n    .hex()\n}\n\nfunction getDarkerShadeFromColor(\n  color: string,\n  contrastRatio: number = DEFAULT_CONTRAST_RATIO,\n): string {\n  return Color(color)\n    .darken(contrastRatio)\n    .hex()\n}\n\nfunction getInvalidOptionsNames(\n  createShadesOptions: ICreateShadesOptions,\n): string[] {\n  const dirtyOptionsNames = Object.keys(createShadesOptions)\n  const validOptionsNames = Object.keys(defaultCreateShadesOptions)\n\n  if (dirtyOptionsNames.length === 0) {\n    return []\n  }\n\n  const invalidOptionsNames: string[] = dirtyOptionsNames.filter(\n    dirtyOptionName => {\n      if (!validOptionsNames.includes(dirtyOptionName)) {\n        return true\n      }\n\n      return false\n    },\n  )\n\n  return invalidOptionsNames\n}\n\nexport const EXCEPTION__INVALID_COLOR_STRING = `You are passing an invalid or malformed color string (%s).\nTo learn more about our algorithm for hexadecimal color strings,\nplease refer to https://stackoverflow.com/a/9682781.\n`\n\nexport const EXCEPTION__INVALID_CREATE_SHADES_OPTIONS = `You passed some invalid options when generating shades (%s).\nPlease refer to https://github.com/chiefGui/reshader to know more\nabout the available, valid options.\n`\n\nexport interface ICreateShadesOptions {\n  /**\n   * `contrastRatio`\n   * (default: 0.3) from 0.1 to 1, how strong the contrast between shades will look like (0.1 is the slightest, 1 is the strongest)\n   */\n  contrastRatio?: number\n}\n\nexport interface IShades {\n  darkest: string\n  darker: string\n  dark: string\n  neutral: string\n  light: string\n  lighter: string\n  lightest: string\n}\n","/**\n * isValidHexColor checks whether a given color string matches\n * a hexadecimal string.\n *\n * @param maybeHexColor the string to check\n */\nexport function isValidHexColor(maybeHexColor: string): boolean {\n  return /^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(maybeHexColor)\n}\n","import { createShades, IShades, ICreateShadesOptions } from \"../createShades\"\n\n/**\n * `createPalette` returns shades for every color present on its first argument.\n *\n * @param {string | TColorsShape} colors - The colors you want to generate shades from.\n */\nexport function createPalette<TColors extends TColorsShape>(\n  colors: TColors,\n): TPalette<TColors> {\n  const colorNames = Object.keys(colors) as (keyof TColors)[]\n\n  return colorNames.reduce(\n    (previousColor, currentColor) => {\n      /**\n       * Let's normalize the color input\n       */\n      const colorShape = getColorShape(colors[currentColor])\n\n      previousColor[currentColor] = createShades(\n        colorShape.hex,\n        colorShape.options,\n      )\n\n      return previousColor\n    },\n    {} as TPalette<TColors>,\n  )\n}\n\nfunction getColorShape(color: string | IColorShape): IColorShape {\n  if (typeof color === \"string\") {\n    return {\n      hex: color,\n      options: {},\n    }\n  }\n\n  return color\n}\n\ntype TColorsShape = { [colorName: string]: string | IColorShape }\n\ninterface IColorShape {\n  /**\n   * A valid hexadecimal string that represents a given color.\n   * Passing an invalid value here will throw an exception.\n   */\n  hex: string\n\n  /**\n   * The options used to generate the shades for this given color.\n   * Same as the options of `createShades`, as seen in `ICreateShadesOptions`.\n   */\n  options?: ICreateShadesOptions\n}\n\nexport type TPalette<TColors extends TColorsShape> = {\n  [colorName in keyof TColors]: IShades\n}\n","import { ISchema } from \"../../features/schema\"\nimport { format } from \"../../utils/format/index\"\n\nexport function parseSchemaToJSON(\n  schema: ISchema,\n  options: IParseSchemaToJSONOptions = {\n    numberOfSpaces: 0,\n  },\n): string {\n  const schemaName = Object.keys(schema)[0]\n\n  if (!schema[schemaName].neutral) {\n    throw new Error(\n      format(EXCEPTION__NO_NEUTRAL, JSON.stringify(schema, null, 2)),\n    )\n  }\n\n  const hydratedSchemaName = schemaName\n    .trim()\n    // camelize\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(word, index) {\n      return index == 0 ? word.toLowerCase() : word.toUpperCase()\n    })\n    .replace(/\\s+/g, \"\")\n\n  const bracketSpaces =\n    options.numberOfSpaces === 0 ? \"\" : getSpaces(options.numberOfSpaces)\n\n  const schemaNameSpaces =\n    options.numberOfSpaces === 0\n      ? \"  \"\n      : bracketSpaces + getSpaces(options.numberOfSpaces)\n\n  const shadeSpaces =\n    options.numberOfSpaces === 0\n      ? \"    \"\n      : schemaNameSpaces + getSpaces(options.numberOfSpaces)\n\n  return `${bracketSpaces}{\n${schemaNameSpaces}\"${hydratedSchemaName}\": {\n${shadeSpaces}\"darkest\": \"${schema[schemaName].darkest}\",\n${shadeSpaces}\"darker\": \"${schema[schemaName].darker}\",\n${shadeSpaces}\"dark\": \"${schema[schemaName].dark}\",\n${shadeSpaces}\"neutral\": \"${schema[schemaName].neutral}\",\n${shadeSpaces}\"light\": \"${schema[schemaName].light}\",\n${shadeSpaces}\"lighter\": \"${schema[schemaName].lighter}\",\n${shadeSpaces}\"lightest\": \"${schema[schemaName].lightest}\"\n${schemaNameSpaces}}\n${bracketSpaces}}`\n}\n\nfunction getSpaces(numberOfSpaces: number): string {\n  return new Array(numberOfSpaces).fill(\" \").join(\"\")\n}\n\nexport const EXCEPTION__NO_NEUTRAL = `You are trying to parse a Reshader Schema to JSON,\nbut no \"neutral\" shade was found. Instead, this is what we got: (\"%s\").\nPlease, make sure you have a \"neutral\" shade present in the object of the very first argument\nof \\`parseSchemaToJSON\\`.\n\nA good way to have a valid Schema, is to generate the shades using the function \\`createShades\\`\nfrom this same engine. (import { createShades } from \"@reshader/engine\")\n`\n\ninterface IParseSchemaToJSONOptions {\n  numberOfSpaces: number\n}\n"],"names":["format","content","tokenValue","replace","const","DEFAULT_CONTRAST_RATIO","createShades","color","options","defaultCreateShadesOptions","test","Error","EXCEPTION__INVALID_COLOR_STRING","toString","dirtyOptionsNames","validOptionsNames","invalidOptionNames","Object","keys","length","filter","dirtyOptionName","includes","EXCEPTION__INVALID_CREATE_SHADES_OPTIONS","join","dark","getDarkerShadeFromColor","contrastRatio","darker","darkest","light","getLighterShadeFromColor","lighter","neutral","Color","lighten","hex","darken","createPalette","colors","reduce","previousColor","currentColor","colorShape","parseSchemaToJSON","schema","numberOfSpaces","schemaName","EXCEPTION__NO_NEUTRAL","JSON","stringify","hydratedSchemaName","trim","word","index","toLowerCase","toUpperCase","bracketSpaces","getSpaces","schemaNameSpaces","shadeSpaces","Array","fill"],"mappings":"8BAAgBA,EAAOC,EAAiBC,UAC/BD,EAAQE,QAAQ,KAAMD,GCG/BE,IAAMC,EAAyB,YAQfC,EACdC,EACAC,qBAAgCC,ICPzB,gCAAgCC,KDSlBH,SACb,IAAII,MACRX,EAAOY,MAAqCL,EAAMM,qBA4DhDC,EACAC,EAzDAC,GAwDAF,EAAoBG,OAAOC,KAxDiBV,GAyD5CO,EAAoBE,OAAOC,KAAKT,GAEL,IAA7BK,EAAkBK,OACb,GAG6BL,EAAkBM,gBACtDC,UACON,EAAkBO,SAASD,SAhEhCL,EAAmBG,OAAS,QACxB,IAAIR,MACRX,EACEuB,MACIP,EAAmBQ,KAAK,gBAK5BC,EAAOC,EAAwBnB,EAAOC,EAAQmB,eAC9CC,EAASF,EAAwBD,EAAMjB,EAAQmB,eAC/CE,EAAUH,EAAwBE,EAAQpB,EAAQmB,eAElDG,EAAQC,EAAyBxB,EAAOC,EAAQmB,eAChDK,EAAUD,EAAyBD,EAAOtB,EAAQmB,qBAGjD,SACLE,SACAD,OACAH,EAEAQ,QAAS1B,QAETuB,UACAE,WAVeD,EAAyBC,EAASxB,EAAQmB,gBAe7DvB,IAAMK,EAAmD,CACvDkB,cAAetB,GAGjB,SAAS0B,EACPxB,EACAoB,yBAAwBtB,GAEjB6B,EAAM3B,GACV4B,QAAQR,GACRS,MAGL,SAASV,EACPnB,EACAoB,yBAAwBtB,GAEjB6B,EAAM3B,GACV8B,OAAOV,GACPS,UA0BQxB,yLAKAW,oLEhGGe,EACdC,UAEmBtB,OAAOC,KAAKqB,GAEbC,gBACfC,EAAeC,OAiBGnC,EAbXoC,EAcW,iBADApC,EAbgBgC,EAAOG,IAenC,CACLN,IAAK7B,EACLC,QAAS,IAIND,SAnBHkC,EAAcC,GAAgBpC,EAC5BqC,EAAWP,IACXO,EAAWnC,SAGNiC,GAET,aCvBYG,EACdC,EACArC,kBAAqC,CACnCsC,eAAgB,QAGZC,EAAa9B,OAAOC,KAAK2B,GAAQ,OAElCA,EAAOE,GAAYd,cAChB,IAAItB,MACRX,EAAOgD,EAAuBC,KAAKC,UAAUL,EAAQ,KAAM,SAIzDM,EAAqBJ,EACxBK,OAEAjD,QAAQ,sBAAuB,SAASkD,EAAMC,UAC7B,GAATA,EAAaD,EAAKE,cAAgBF,EAAKG,gBAE/CrD,QAAQ,OAAQ,IAEbsD,EACuB,IAA3BjD,EAAQsC,eAAuB,GAAKY,EAAUlD,EAAQsC,gBAElDa,EACuB,IAA3BnD,EAAQsC,eACJ,KACAW,EAAgBC,EAAUlD,EAAQsC,gBAElCc,EACuB,IAA3BpD,EAAQsC,eACJ,OACAa,EAAmBD,EAAUlD,EAAQsC,uBAEjCW,QACVE,MAAoBR,WACpBS,iBAA0Bf,EAAOE,kBACjCa,gBAAyBf,EAAOE,iBAChCa,cAAuBf,EAAOE,eAC9Ba,iBAA0Bf,EAAOE,kBACjCa,eAAwBf,EAAOE,gBAC/Ba,iBAA0Bf,EAAOE,kBACjCa,kBAA2Bf,EAAOE,kBAClCY,QACAF,MAGF,SAASC,EAAUZ,UACV,IAAIe,MAAMf,GAAgBgB,KAAK,KAAKtC,KAAK,IAGlD,IAAawB"}